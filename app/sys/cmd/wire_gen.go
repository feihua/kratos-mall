// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/feihua/kratos-mall/app/sys/internal/biz"
	"github.com/feihua/kratos-mall/app/sys/internal/conf"
	"github.com/feihua/kratos-mall/app/sys/internal/data"
	"github.com/feihua/kratos-mall/app/sys/internal/server"
	"github.com/feihua/kratos-mall/app/sys/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData, logger)
	dataData, cleanup, err := data.NewData(db, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	menuRepo := data.NewMenuRepo(dataData, logger)
	userUseCase := biz.NewUserUseCase(userRepo, menuRepo, logger)
	logRepo := data.NewLogRepo(dataData, logger)
	logUseCase := biz.NewLogUseCase(logRepo, logger)
	menuUseCase := biz.NewMenuUseCase(menuRepo, logger)
	roleRepo := data.NewRoleRepo(dataData, logger)
	roleUseCase := biz.NewRoleUseCase(roleRepo, menuRepo, logger)
	jobRepo := data.NewJobRepo(dataData, logger)
	jobUseCase := biz.NewJobUseCase(jobRepo, logger)
	dictRepo := data.NewDictRepo(dataData, logger)
	dictUseCase := biz.NewDictUseCase(dictRepo, logger)
	deptRepo := data.NewDeptRepo(dataData, logger)
	deptUseCase := biz.NewDeptUseCase(deptRepo, logger)
	sysService := service.NewSysService(userUseCase, logUseCase, menuUseCase, logger, roleUseCase, jobUseCase, dictUseCase, deptUseCase)
	grpcServer := server.NewGRPCServer(confServer, sysService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
