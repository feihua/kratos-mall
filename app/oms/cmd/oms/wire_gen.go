// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/feihua/kratos-mall/app/oms/internal/biz"
	"github.com/feihua/kratos-mall/app/oms/internal/conf"
	"github.com/feihua/kratos-mall/app/oms/internal/data"
	"github.com/feihua/kratos-mall/app/oms/internal/server"
	"github.com/feihua/kratos-mall/app/oms/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData, logger)
	dataData, cleanup, err := data.NewData(db, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	cartItemRepo := data.NewCartItemRepo(dataData, logger)
	cartItemUseCase := biz.NewCartItemUseCase(cartItemRepo, logger)
	companyAddressRepo := data.NewCompanyAddressRepo(dataData, logger)
	companyAddressUseCase := biz.NewCompanyAddressUseCase(companyAddressRepo, logger)
	operateHistoryRepo := data.NewOperateHistoryRepo(dataData, logger)
	operateHistoryUseCase := biz.NewOperateHistoryUseCase(operateHistoryRepo, logger)
	orderRepo := data.NewOrderRepo(dataData, logger)
	orderUseCase := biz.NewOrderUseCase(orderRepo, logger)
	returnApplyRepo := data.NewReturnApplyRepo(dataData, logger)
	returnApplyUseCase := biz.NewReturnApplyUseCase(returnApplyRepo, logger)
	returnReasonRepo := data.NewReturnReasonRepo(dataData, logger)
	returnReasonUseCase := biz.NewReturnReasonUseCase(returnReasonRepo, logger)
	settingRepo := data.NewSettingRepo(dataData, logger)
	settingUseCase := biz.NewSettingUseCase(settingRepo, logger)
	omsService := service.NewOmsService(greeterUsecase, logger, cartItemUseCase, companyAddressUseCase, operateHistoryUseCase, orderUseCase, returnApplyUseCase, returnReasonUseCase, settingUseCase)
	grpcServer := server.NewGRPCServer(confServer, omsService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
