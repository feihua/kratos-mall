// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/feihua/kratos-mall/app/front/admin/internal/biz"
	oms2 "github.com/feihua/kratos-mall/app/front/admin/internal/biz/oms"
	pay2 "github.com/feihua/kratos-mall/app/front/admin/internal/biz/pay"
	pms2 "github.com/feihua/kratos-mall/app/front/admin/internal/biz/pms"
	sms2 "github.com/feihua/kratos-mall/app/front/admin/internal/biz/sms"
	sys2 "github.com/feihua/kratos-mall/app/front/admin/internal/biz/sys"
	ums2 "github.com/feihua/kratos-mall/app/front/admin/internal/biz/ums"
	"github.com/feihua/kratos-mall/app/front/admin/internal/conf"
	"github.com/feihua/kratos-mall/app/front/admin/internal/data"
	"github.com/feihua/kratos-mall/app/front/admin/internal/data/oms"
	"github.com/feihua/kratos-mall/app/front/admin/internal/data/pay"
	"github.com/feihua/kratos-mall/app/front/admin/internal/data/pms"
	"github.com/feihua/kratos-mall/app/front/admin/internal/data/sms"
	"github.com/feihua/kratos-mall/app/front/admin/internal/data/sys"
	"github.com/feihua/kratos-mall/app/front/admin/internal/data/ums"
	"github.com/feihua/kratos-mall/app/front/admin/internal/server"
	"github.com/feihua/kratos-mall/app/front/admin/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	discovery := data.NewDiscovery(registry)
	umsClient := data.NewUmsServiceClient(discovery)
	payClient := data.NewPayServiceClient(discovery)
	pmsClient := data.NewPmsServiceClient(discovery)
	smsClient := data.NewSmsServiceClient(discovery)
	sysClient := data.NewSysServiceClient(discovery)
	omsClient := data.NewOmsServiceClient(discovery)
	dataData, err := data.NewData(logger, umsClient, payClient, pmsClient, smsClient, sysClient, omsClient)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase, logger)
	cartItemRepo := oms.NewCartItemRepo(dataData, logger)
	cartItemUseCase := oms2.NewCartItemUseCase(cartItemRepo, logger)
	companyAddressRepo := oms.NewCompanyAddressRepo(dataData, logger)
	companyAddressUseCase := oms2.NewCompanyAddressUseCase(companyAddressRepo, logger)
	operateHistoryRepo := oms.NewOperateHistoryRepo(logger)
	operateHistoryUseCase := oms2.NewOperateHistoryUseCase(operateHistoryRepo, logger)
	orderRepo := oms.NewOrderRepo(dataData, logger)
	orderUseCase := oms2.NewOrderUseCase(orderRepo, logger)
	returnApplyRepo := oms.NewReturnApplyRepo(dataData, logger)
	returnApplyUseCase := oms2.NewReturnApplyUseCase(returnApplyRepo, logger)
	returnReasonRepo := oms.NewReturnReasonRepo(dataData, logger)
	returnReasonUseCase := oms2.NewReturnReasonUseCase(returnReasonRepo, logger)
	settingRepo := oms.NewSettingRepo(dataData, logger)
	settingUseCase := oms2.NewSettingUseCase(settingRepo, logger)
	omsService := service.NewOmsService(logger, cartItemUseCase, companyAddressUseCase, operateHistoryUseCase, orderUseCase, returnApplyUseCase, returnReasonUseCase, settingUseCase)
	merchantRepo := pay.NewMerchantRepo(dataData, logger)
	merchantUseCase := pay2.NewMerchantUseCase(merchantRepo, logger)
	recordRepo := pay.NewRecordRepo(dataData, logger)
	recordUseCase := pay2.NewRecordUseCase(recordRepo, logger)
	payService := service.NewPayService(greeterUsecase, logger, merchantUseCase, recordUseCase)
	brandRepo := pms.NewBrandRepo(dataData, logger)
	brandUseCase := pms2.NewBrandUseCase(brandRepo, logger)
	categoryRepo := pms.NewCategoryRepo(dataData, logger)
	categoryUseCase := pms2.NewCategoryUseCase(categoryRepo, logger)
	commentRepo := pms.NewCommentRepo(dataData, logger)
	commentUseCase := pms2.NewCommentUseCase(commentRepo, logger)
	commentReplayRepo := pms.NewCommentReplayRepo(dataData, logger)
	commentReplayUseCase := pms2.NewCommentReplayUseCase(commentReplayRepo, logger)
	feightTemplateRepo := pms.NewFeightTemplateRepo(dataData, logger)
	feightTemplateUseCase := pms2.NewFeightTemplateUseCase(feightTemplateRepo, logger)
	memberPriceRepo := pms.NewMemberPriceRepo(dataData, logger)
	memberPriceUseCase := pms2.NewMemberPriceUseCase(memberPriceRepo, logger)
	pmsOperateHistoryRepo := pms.NewOperateHistoryRepo(dataData, logger)
	pmsOperateHistoryUseCase := pms2.NewOperateHistoryUseCase(pmsOperateHistoryRepo, logger)
	productRepo := pms.NewProductRepo(dataData, logger)
	productUseCase := pms2.NewProductUseCase(productRepo, logger)
	skuStockRepo := pms.NewSkuStockRepo(dataData, logger)
	skuStockUseCase := pms2.NewSkuStockUseCase(skuStockRepo, logger)
	vertifyRecordRepo := pms.NewVertifyRecordRepo(dataData, logger)
	vertifyRecordUseCase := pms2.NewVertifyRecordUseCase(vertifyRecordRepo, logger)
	pmsService := service.NewPmsService(greeterUsecase, logger, brandUseCase, categoryUseCase, commentUseCase, commentReplayUseCase, feightTemplateUseCase, memberPriceUseCase, pmsOperateHistoryUseCase, productUseCase, skuStockUseCase, vertifyRecordUseCase)
	couponRepo := sms.NewCouponRepo(dataData, logger)
	couponUseCase := sms2.NewCouponUseCase(couponRepo, logger)
	couponHistoryRepo := sms.NewCouponHistoryRepo(dataData, logger)
	couponHistoryUseCase := sms2.NewCouponHistoryUseCase(couponHistoryRepo, logger)
	flashPromotionRepo := sms.NewFlashPromotionRepo(dataData, logger)
	flashPromotionUseCase := sms2.NewFlashPromotionUseCase(flashPromotionRepo, logger)
	flashPromotionHistoryRepo := sms.NewFlashPromotionHistoryRepo(dataData, logger)
	flashPromotionHistoryUseCase := sms2.NewFlashPromotionHistoryUseCase(flashPromotionHistoryRepo, logger)
	flashPromotionSessionRepo := sms.NewFlashPromotionSessionRepo(dataData, logger)
	flashPromotionSessionUseCase := sms2.NewFlashPromotionSessionUseCase(flashPromotionSessionRepo, logger)
	homeAdvertiseRepo := sms.NewHomeAdvertiseRepo(dataData, logger)
	homeAdvertiseUseCase := sms2.NewHomeAdvertiseUseCase(homeAdvertiseRepo, logger)
	homeBrandRepo := sms.NewHomeBrandRepo(dataData, logger)
	homeBrandUseCase := sms2.NewHomeBrandUseCase(homeBrandRepo, logger)
	homeNewProductRepo := sms.NewHomeNewProductRepo(dataData, logger)
	homeNewProductUseCase := sms2.NewHomeNewProductUseCase(homeNewProductRepo, logger)
	homeRecommendProductRepo := sms.NewHomeRecommendProductRepo(dataData, logger)
	homeRecommendProductUseCase := sms2.NewHomeRecommendProductUseCase(homeRecommendProductRepo, logger)
	homeRecommendSubjectRepo := sms.NewHomeRecommendSubjectRepo(dataData, logger)
	homeRecommendSubjectUseCase := sms2.NewHomeRecommendSubjectUseCase(homeRecommendSubjectRepo, logger)
	smsService := service.NewSmsService(greeterUsecase, logger, couponUseCase, couponHistoryUseCase, flashPromotionUseCase, flashPromotionHistoryUseCase, flashPromotionSessionUseCase, homeAdvertiseUseCase, homeBrandUseCase, homeNewProductUseCase, homeRecommendProductUseCase, homeRecommendSubjectUseCase)
	userRepo := sys.NewUserRepo(dataData, logger)
	roleRepo := sys.NewRoleRepo(dataData, logger)
	deptRepo := sys.NewDeptRepo(dataData, logger)
	jobRepo := sys.NewJobRepo(dataData, logger)
	userUseCase := sys2.NewUserUseCase(userRepo, roleRepo, deptRepo, jobRepo, logger)
	logRepo := sys.NewLogRepo(dataData, logger)
	logUseCase := sys2.NewLogUseCase(logRepo, logger)
	menuRepo := sys.NewMenuRepo(dataData, logger)
	menuUseCase := sys2.NewMenuUseCase(menuRepo, logger)
	roleUseCase := sys2.NewRoleUseCase(roleRepo, logger)
	jobUseCase := sys2.NewJobUseCase(jobRepo, logger)
	dictRepo := sys.NewDictRepo(dataData, logger)
	dictUseCase := sys2.NewDictUseCase(dictRepo, logger)
	deptUseCase := sys2.NewDeptUseCase(deptRepo, logger)
	sysService := service.NewSysService(userUseCase, logUseCase, menuUseCase, logger, roleUseCase, jobUseCase, dictUseCase, deptUseCase)
	changeHistoryRepo := ums.NewChangeHistoryRepo(dataData, logger)
	changeHistoryUseCase := ums2.NewChangeHistoryUseCase(changeHistoryRepo, logger)
	integrationChangeHistoryRepo := ums.NewIntegrationChangeHistoryRepo(dataData, logger)
	integrationChangeHistoryUseCase := ums2.NewIntegrationChangeHistoryUseCase(integrationChangeHistoryRepo, logger)
	consumeSettingRepo := ums.NewConsumeSettingRepo(dataData, logger)
	consumeSettingUseCase := ums2.NewConsumeSettingUseCase(consumeSettingRepo, logger)
	loginLogRepo := ums.NewLoginLogRepo(dataData, logger)
	loginLogUseCase := ums2.NewLoginLogUseCase(loginLogRepo, logger)
	memberRepo := ums.NewMemberRepo(dataData, logger)
	memberUseCase := ums2.NewMemberUseCase(memberRepo, logger)
	memberAddressRepo := ums.NewMemberAddressRepo(dataData, logger)
	memberAddressUseCase := ums2.NewMemberAddressUseCase(memberAddressRepo, logger)
	memberLevelRepo := ums.NewMemberLevelRepo(dataData, logger)
	memberLevelUseCase := ums2.NewMemberLevelUseCase(memberLevelRepo, logger)
	ruleSettingRepo := ums.NewRuleSettingRepo(dataData, logger)
	ruleSettingUseCase := ums2.NewRuleSettingUseCase(ruleSettingRepo, logger)
	tagRepo := ums.NewTagRepo(dataData, logger)
	tagUseCase := ums2.NewTagUseCase(tagRepo, logger)
	taskRepo := ums.NewTaskRepo(dataData, logger)
	taskUseCase := ums2.NewTaskUseCase(taskRepo, logger)
	umsService := service.NewUmsService(greeterUsecase, logger, changeHistoryUseCase, integrationChangeHistoryUseCase, consumeSettingUseCase, loginLogUseCase, memberUseCase, memberAddressUseCase, memberLevelUseCase, ruleSettingUseCase, tagUseCase, taskUseCase)
	httpServer := server.NewHTTPServer(confServer, greeterService, omsService, payService, pmsService, smsService, sysService, umsService, logger)
	grpcServer := server.NewGRPCServer(confServer, greeterService, omsService, payService, pmsService, smsService, sysService, umsService, logger)
	registrar := data.NewRegistrar(registry)
	app := newApp(logger, httpServer, grpcServer, registrar)
	return app, func() {
	}, nil
}
