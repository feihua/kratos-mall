// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/feihua/kratos-mall/app/ums/internal/biz"
	"github.com/feihua/kratos-mall/app/ums/internal/conf"
	"github.com/feihua/kratos-mall/app/ums/internal/data"
	"github.com/feihua/kratos-mall/app/ums/internal/server"
	"github.com/feihua/kratos-mall/app/ums/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData, logger)
	dataData, cleanup, err := data.NewData(db, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	changeHistoryRepo := data.NewChangeHistoryRepo(dataData, logger)
	changeHistoryUseCase := biz.NewChangeHistoryUseCase(changeHistoryRepo, logger)
	integrationChangeHistoryRepo := data.NewIntegrationChangeHistoryRepo(dataData, logger)
	integrationChangeHistoryUseCase := biz.NewIntegrationChangeHistoryUseCase(integrationChangeHistoryRepo, logger)
	consumeSettingRepo := data.NewConsumeSettingRepo(dataData, logger)
	consumeSettingUseCase := biz.NewConsumeSettingUseCase(consumeSettingRepo, logger)
	loginLogRepo := data.NewLoginLogRepo(dataData, logger)
	loginLogUseCase := biz.NewLoginLogUseCase(loginLogRepo, logger)
	memberRepo := data.NewMemberRepo(dataData, logger)
	memberUseCase := biz.NewMemberUseCase(memberRepo, logger)
	memberAddressRepo := data.NewMemberAddressRepo(dataData, logger)
	memberAddressUseCase := biz.NewMemberAddressUseCase(memberAddressRepo, logger)
	memberLevelRepo := data.NewMemberLevelRepo(dataData, logger)
	memberLevelUseCase := biz.NewMemberLevelUseCase(memberLevelRepo, logger)
	ruleSettingRepo := data.NewRuleSettingRepo(dataData, logger)
	ruleSettingUseCase := biz.NewRuleSettingUseCase(ruleSettingRepo, logger)
	tagRepo := data.NewTagRepo(dataData, logger)
	tagUseCase := biz.NewTagUseCase(tagRepo, logger)
	taskRepo := data.NewTaskRepo(dataData, logger)
	taskUseCase := biz.NewTaskUseCase(taskRepo, logger)
	umsService := service.NewUmsService(greeterUsecase, logger, changeHistoryUseCase, integrationChangeHistoryUseCase, consumeSettingUseCase, loginLogUseCase, memberUseCase, memberAddressUseCase, memberLevelUseCase, ruleSettingUseCase, tagUseCase, taskUseCase)
	grpcServer := server.NewGRPCServer(confServer, umsService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
